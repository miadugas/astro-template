<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 27.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 2712 894" style="enable-background:new 0 0 2712 894;" xml:space="preserve">
<style type="text/css">
	.st0{fill-rule:evenodd;clip-rule:evenodd;fill:#FF5D01;stroke:#000000;stroke-width:7;stroke-miterlimit:10;}
	.st1{fill:#FFFFFF;stroke:#000000;stroke-width:9;stroke-miterlimit:10;}
	.st2{stroke:#FFFFFF;stroke-width:7;stroke-miterlimit:10;}
	.st3{fill:#FFFFFF;}
	.st4{font-family:'Arial-Black';}
	.st5{font-size:293px;}
</style>
<script  xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== &apos;undefined&apos;)) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== &apos;undefined&apos;)) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: &apos;text/html&apos;, useXMLparser: false },
        { mime: &apos;application/xhtml+xml&apos;, useXMLparser: true },
        { mime: &apos;text/xml&apos;, useXMLparser: true },
        { mime: &apos;application/xml&apos;, useXMLparser: true },
        { mime: &apos;image/svg+xml&apos;, useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === &apos;object&apos;) &amp;&amp; (typeof arg.type === &apos;string&apos;) &amp;&amp; (arg.type));

      if (typeof typeEl !== &apos;undefined&apos; &amp;&amp; (typeof args[0][0] === &apos;string&apos;)) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(&apos;&apos;), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName(&quot;parsererror&quot;).length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML(&apos;afterbegin&apos;, injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener(&apos;message&apos;, function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case &apos;updateLocation&apos;:
        if ((typeof message.info === &apos;object&apos;) &amp;&amp; (typeof message.info.coords === &apos;object&apos;)) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()
	</script>
<path class="st0" d="M47,440.8c56.2,0.5,110.2-41.5,188.6-34.4c85.4,7.7,155.7,26.9,192.3,54.1c7.7-21.5,9.4-46.1,9.4-61.8
	c0,0,5.1-77.1-52.9-130.7c0,27.8-24.4,50.4-54.5,50.4c-51.6,0-51.5-41.6-51.5-75.4c0-1,0-2,0-3c0-51.3-33.9-95.2-82.1-113.8
	c7.2,13.7,11.2,29.1,11.2,45.3c0,48.9-31,67.1-67.1,88.3C111.8,276.7,79.9,295.4,58,333c-11.5,19.6-18,42-18,65.8
	C40,413.5,42.5,427.6,47,440.8z"/>
<path class="st1" d="M466.8,556.9c0.1-114.4-98.3-207.5-221-211c-131-3.7-239,96.2-235.1,217.4C14.5,676.8,115.3,767.8,239,767.7
	C364.4,767.6,466.7,672.9,466.8,556.9z"/>
<g>
	<path class="st2" d="M306,660.7c-1.8-2.4-5.2-3.3-8-2c-31.5,13.8-67.2,28.4-74.2,29.6c-0.2-0.1-0.5-0.4-0.8-0.9
		c-1-1.2-1.4-2.7-1.4-4.8c0-16.5,13.4-66.6,39.9-148.9c22.4-69.2,24.9-83.5,24.9-88.3c0-7.3-3-13.5-8.8-17.9
		c-5.5-4.2-13.1-6.3-22.7-6.3c-16,0-34.5,5.6-56.5,17.1c-21.4,11.2-45.3,30.1-70.9,56.3c-2,2-2.2,5.1-0.5,7.4
		c1.7,2.3,4.9,3.1,7.7,2.1c9-3.4,54.3-20.6,60.9-24.4c5.4-3.1,10.1-4.7,13.9-4.7c0.1,0,0.3,0,0.4,0c0,0.2,0.1,0.6,0.1,1.1
		c0,3.6-0.8,7.9-2.4,12.7c-38.6,115.7-57.4,186.6-57.4,216.8c0,10.7,3.2,19.2,9.5,25.5c6.4,6.4,15.1,9.6,25.8,9.6
		c11.4,0,25.2-4.4,42.4-13.5c16.6-8.8,41.9-28,77.3-58.9C307.4,666.4,307.8,663.1,306,660.7z"/>
	<path class="st2" d="M304.7,370.7c-6.3-6-14.4-9-24-9c-12,0-22.4,4.4-31,13c-8.4,8.5-12.7,18.9-12.7,30.9c0,9.5,3.2,17.4,9.4,23.4
		c6.3,6.1,14.3,9.2,23.7,9.2c11.5,0,21.8-4.6,30.8-13.7c8.8-8.9,13.3-19.5,13.3-31.3C314.2,384.2,311,376.6,304.7,370.7z"/>
</g>
<text transform="matrix(1 0 0 1 517.9531 621.0264)" class="st3 st4 st5">InfoStructure</text>
</svg>
